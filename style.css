// Dulce Hogar - Script principal

document.addEventListener('DOMContentLoaded', () => {
  initMobileMenu();
  initSmoothScrolling();
  initProductFilter();
  initContactForm();
  initScrollAnimations();
  initIntersectionObserver();
  initWhatsAppButtons();

  // Carrito
  Cart.init();
  bindAddToCartButtons();
  bindCartUI();

  // Asegura estado inicial de filtros
  applyFilter('all');

  console.log('Dulce Hogar listo üç∞');
});

/* =======================
   Men√∫ m√≥vil
======================= */
function initMobileMenu() {
  const btn = document.querySelector('.mobile-menu-button');
  const menu = document.querySelector('.mobile-menu');
  const links = document.querySelectorAll('.mobile-menu a');
  if (!btn || !menu) return;

  btn.addEventListener('click', () => {
    menu.classList.toggle('hidden');
    menu.classList.toggle('active');
    const icon = btn.querySelector('i');
    icon.classList.toggle('fa-bars');
    icon.classList.toggle('fa-times');
  });

  links.forEach(a => {
    a.addEventListener('click', () => {
      menu.classList.add('hidden');
      menu.classList.remove('active');
      const icon = btn.querySelector('i');
      icon.classList.add('fa-bars');
      icon.classList.remove('fa-times');
    });
  });

  document.addEventListener('click', (e) => {
    if (!menu.contains(e.target) && !btn.contains(e.target)) {
      menu.classList.add('hidden');
      menu.classList.remove('active');
      const icon = btn.querySelector('i');
      icon.classList.add('fa-bars');
      icon.classList.remove('fa-times');
    }
  });
}

/* =======================
   Scroll suave
======================= */
function initSmoothScrolling() {
  document.querySelectorAll('a[href^="#"]').forEach(link => {
    link.addEventListener('click', (e) => {
      const targetId = link.getAttribute('href');
      if (!targetId || targetId === '#') return;
      const section = document.querySelector(targetId);
      if (!section) return;
      e.preventDefault();
      const headerOffset = 80;
      const top = section.offsetTop - headerOffset;
      window.scrollTo({ top, behavior: 'smooth' });
    });
  });
}

/* =======================
   Filtro de productos
======================= */
function initProductFilter() {
  const buttons = document.querySelectorAll('.product-filter');
  buttons.forEach(btn => {
    btn.addEventListener('click', () => {
      buttons.forEach(b => b.classList.remove('active', 'bg-pink-600', 'text-white'));
      buttons.forEach(b => b.classList.add('bg-gray-200', 'text-gray-700'));
      btn.classList.remove('bg-gray-200', 'text-gray-700');
      btn.classList.add('active', 'bg-pink-600', 'text-white');

      const filter = (btn.dataset.filter || 'all').toLowerCase();
      applyFilter(filter);
    });
  });
}

function applyFilter(filter) {
  const items = document.querySelectorAll('.product-item');
  items.forEach(card => {
    const category = (card.dataset.category || '').toLowerCase();
    // Acepta singular/plural por si el usuario dice "abarrote"
    const normalizedFilter = filter === 'abarrote' ? 'abarrotes' : filter;
    const show = normalizedFilter === 'all' || category === normalizedFilter;
    card.style.opacity = '0';
    card.style.transform = 'scale(0.98)';
    setTimeout(() => {
      card.classList.toggle('hidden', !show);
      setTimeout(() => {
        card.style.opacity = show ? '1' : '0';
        card.style.transform = 'scale(1)';
      }, 30);
    }, 200);
  });
}

/* =======================
   Formulario contacto
======================= */
function initContactForm() {
  const form = document.getElementById('contact-form');
  if (!form) return;

  form.addEventListener('submit', async (e) => {
    e.preventDefault();
    const data = Object.fromEntries(new FormData(form).entries());
    const errors = [];

    if (!data.name || data.name.trim().length < 2) errors.push('El nombre debe tener al menos 2 caracteres');
    if (!data.email || !/^[^\s@]+@[^\s@]+\.[^\s@]+$/.test(data.email)) errors.push('Email inv√°lido');
    if (!data.subject) errors.push('Selecciona un asunto');
    if (!data.message || data.message.trim().length < 10) errors.push('El mensaje debe tener al menos 10 caracteres');
    if (data.phone && !/^[0-9+\s()-]{6,}$/.test(data.phone)) errors.push('Tel√©fono inv√°lido');

    const existing = form.querySelector('.success-message, .error-message');
    if (existing) existing.remove();

    if (errors.length) {
      const div = document.createElement('div');
      div.className = 'error-message';
      div.innerHTML = errors.join('<br>');
      form.appendChild(div);
      return;
    }

    const submitBtn = form.querySelector('button[type="submit"]');
    submitBtn.classList.add('loading');

    try {
      const res = await fetch(form.action, {
        method: 'POST',
        headers: { 'Accept': 'application/json' },
        body: new FormData(form)
      });
      const ok = res.ok;
      const div = document.createElement('div');
      div.className = ok ? 'success-message' : 'error-message';
      div.textContent = ok ? '¬°Mensaje enviado! Te contactaremos pronto.' : 'Hubo un problema. Intenta de nuevo.';
      form.appendChild(div);
      if (ok) form.reset();
    } catch (err) {
      const div = document.createElement('div');
      div.className = 'error-message';
      div.textContent = 'Error de red. Intenta m√°s tarde.';
      form.appendChild(div);
    } finally {
      submitBtn.classList.remove('loading');
    }
  });
}

/* =======================
   Animaciones al hacer scroll
======================= */
function initScrollAnimations() {
  // Placeholder si usas clases .fade-in/.slide-in-*
}

function initIntersectionObserver() {
  const els = document.querySelectorAll('.fade-in, .slide-in-left, .slide-in-right');
  if (!('IntersectionObserver' in window) || !els.length) return;
  const io = new IntersectionObserver((entries) => {
    entries.forEach(e => {
      if (e.isIntersecting) {
        e.target.classList.add('visible');
        io.unobserve(e.target);
      }
    });
  }, { threshold: 0.2 });
  els.forEach(el => io.observe(el));
}

/* =======================
   Botones de WhatsApp
======================= */
function initWhatsAppButtons() {
  // Puedes agregar listeners personalizados si hace falta
}

/* =======================
   Carrito de compras
======================= */
const Cart = {
  key: 'dulcehogar_cart_v1',
  items: [],

  init() {
    try {
      this.items = JSON.parse(localStorage.getItem(this.key)) || [];
    } catch {
      this.items = [];
    }
    this.render();
  },

  save() {
    localStorage.setItem(this.key, JSON.stringify(this.items));
  },

  add(item) {
    const idx = this.items.findIndex(i => i.id === item.id);
    if (idx >= 0) {
      this.items[idx].qty += item.qty || 1;
    } else {
      this.items.push({ ...item, qty: item.qty || 1 });
    }
    this.persistAndRender();
  },

  remove(id) {
    this.items = this.items.filter(i => i.id !== id);
    this.persistAndRender();
  },

  setQty(id, qty) {
    const it = this.items.find(i => i.id === id);
    if (!it) return;
    it.qty = Math.max(1, qty);
    this.persistAndRender();
  },

  clear() {
    this.items = [];
    this.persistAndRender();
  },

  total() {
    return this.items.reduce((sum, i) => sum + i.price * i.qty, 0);
  },

  persistAndRender() {
    this.save();
    this.render();
  },

  render() {
    const list = document.getElementById('cart-items');
    const totalEl = document.getElementById('cart-total');
    const badges = [document.getElementById('cart-count'), document.getElementById('cart-count-mobile')];
    if (list) list.innerHTML = this.items.map(renderCartItem).join('') || '<p class="text-gray-500">Tu carrito est√° vac√≠o.</p>';
    if (totalEl) totalEl.textContent = formatCurrency(this.total());
    const count = this.items.reduce((a, b) => a + b.qty, 0);
    badges.forEach(b => { if (b) b.textContent = count; });

    // Re-bind botones +/-, eliminar
    document.querySelectorAll('[data-cart-action]').forEach(btn => {
      btn.addEventListener('click', () => {
        const action = btn.dataset.cartAction;
        const id = btn.dataset.id;
        const current = Cart.items.find(i => i.id === id);
        if (!current) return;
        if (action === 'inc') Cart.setQty(id, current.qty + 1);
        if (action === 'dec') Cart.setQty(id, Math.max(1, current.qty - 1));
        if (action === 'remove') Cart.remove(id);
      });
    });
  }
};

function renderCartItem(i) {
  return `
  <div class="border rounded-lg p-3">
    <div class="flex justify-between items-start">
      <div>
        <h4 class="font-semibold text-gray-900">${escapeHtml(i.name)}</h4>
        <p class="text-pink-600 font-medium">${formatCurrency(i.price)}</p>
      </div>
      <button class="text-gray-500 hover:text-red-600" data-cart-action="remove" data-id="${i.id}" aria-label="Eliminar">
        <i class="fas fa-trash"></i>
      </button>
    </div>
    <div class="flex items-center gap-3 mt-3">
      <button class="w-8 h-8 rounded border hover:bg-gray-100" data-cart-action="dec" data-id="${i.id}">-</button>
      <span class="min-w-[2ch] text-center">${i.qty}</span>
      <button class="w-8 h-8 rounded border hover:bg-gray-100" data-cart-action="inc" data-id="${i.id}">+</button>
    </div>
  </div>`;
}

function bindAddToCartButtons() {
  document.querySelectorAll('.btn-add-cart').forEach(btn => {
    btn.addEventListener('click', () => {
      const card = btn.closest('.product-item');
      if (!card) return;
      const id = card.dataset.id;
      const name = card.dataset.name;
      const price = Number(card.dataset.price || 0);
      Cart.add({ id, name, price, qty: 1 });
      openCart(); // abre el carrito al a√±adir
    });
  });
}

function bindCartUI() {
  const openers = [document.getElementById('cart-button'), document.getElementById('cart-button-mobile')];
  const overlay = document.getElementById('cart-overlay');
  const panel = document.getElementById('cart-panel');
  const closeBtn = document.getElementById('cart-close');
  const clearBtn = document.getElementById('cart-clear');
  const waBtn = document.getElementById('cart-whatsapp');

  openers.forEach(b => b && b.addEventListener('click', openCart));
  overlay && overlay.addEventListener('click', closeCart);
  closeBtn && closeBtn.addEventListener('click', closeCart);
  clearBtn && clearBtn.addEventListener('click', () => Cart.clear());
  waBtn && waBtn.addEventListener('click', sendCartToWhatsApp);

  function toggle(open) {
    if (!overlay || !panel) return;
    overlay.classList.toggle('hidden', !open);
    panel.style.transform = open ? 'translateX(0)' : 'translateX(100%)';
    document.body.style.overflow = open ? 'hidden' : '';
  }

  window.openCart = () => toggle(true);
  window.closeCart = () => toggle(false);
}

function openCart() { if (window.openCart) window.openCart(); }
function closeCart() { if (window.closeCart) window.closeCart(); }

/* =======================
   WhatsApp checkout
======================= */
function sendCartToWhatsApp() {
  if (!Cart.items.length) return;
  const lines = Cart.items.map(i => `‚Ä¢ ${i.name} x${i.qty} - ${formatCurrency(i.price * i.qty)}`);
  const total = formatCurrency(Cart.total());
  const msg = `Hola! Quiero confirmar este pedido:%0A%0A${lines.join('%0A')}%0A%0ATotal: ${encodeURIComponent(total)}%0A%0A¬øDisponibilidad y tiempo de entrega?`;
  // Reemplaza con tu n√∫mero (formato internacional, sin +)
  const phone = '56912345678';
  const url = `https://wa.me/${phone}?text=${msg}`;
  window.open(url, '_blank');
}

/* =======================
   Utilidades
======================= */
function formatCurrency(n) {
  try {
    return new Intl.NumberFormat('es-CL', { style: 'currency', currency: 'CLP', maximumFractionDigits: 0 }).format(n);
  } catch {
    // Respaldo simple
    return '$' + (n || 0).toLocaleString('es-CL');
  }
}

function escapeHtml(s) {
  return String(s)
    .replace(/&/g, '&amp;').replace(/</g, '&lt;')
    .replace(/>/g, '&gt;').replace(/"/g, '&quot;')
    .replace(/'/g, '&#039;');
}
